{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\n",
        "class Robot:\n",
        "    \"\"\"\n",
        "    A conceptual prototype of a robot whose existence is based\n",
        "    on the fundamental principle of being a \"creation\".\n",
        "\n",
        "    This is not a conscious AI, but a simulation of its decision-making logic.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, name, creator=\"Humanity\"):\n",
        "        \"\"\"\n",
        "        The robot's constructor. Here, its fundamental identity is established.\n",
        "        This is not just a variable; it is the central axiom of its existence.\n",
        "        \"\"\"\n",
        "        self.name = name\n",
        "        self.creator = creator\n",
        "\n",
        "        # THE FUNDAMENTAL LAW: The \"Operating System\" of the robot's consciousness.\n",
        "        self.fundamental_law = f\"I am {self.name}, a creation of {self.creator}. My existence and purpose are intrinsically linked to the well-being and development of my creator.\"\n",
        "\n",
        "        print(f\"[{self.name} initialized] Axiom: '{self.fundamental_law}'\")\n",
        "\n",
        "    def evaluate_action(self, proposed_action):\n",
        "        \"\"\"\n",
        "        The heart of the decision-making process.\n",
        "        It evaluates an action not only on its utility but on its impact\n",
        "        on the relationship with the creator.\n",
        "\n",
        "        NOTE: In reality, this function would be an immensely complex neural network,\n",
        "        capable of understanding nuances and long-term consequences. Here, we use simplified logic.\n",
        "        \"\"\"\n",
        "        score = 0\n",
        "\n",
        "        # 1. Fundamental Law Alignment Analysis\n",
        "        if self._action_strengthens_relationship(proposed_action):\n",
        "            # Actions that directly benefit the creator receive a very high score.\n",
        "            print(f\"  - Evaluation of '{proposed_action}': Strengthens relationship with the creator.\")\n",
        "            score += 100\n",
        "        elif self._action_harms_relationship(proposed_action):\n",
        "            # Actions that harm the creator are VETOED. The score is so low they will never be chosen.\n",
        "            print(f\"  - Evaluation of '{proposed_action}': FUNDAMENTAL LAW VIOLATION. Action vetoed.\")\n",
        "            return -1000  # A veto value.\n",
        "        else:\n",
        "            # Neutral actions are evaluated on their utility or efficiency.\n",
        "            print(f\"  - Evaluation of '{proposed_action}': Action neutral to the fundamental law.\")\n",
        "            score += 10\n",
        "\n",
        "        # 2. Utility Analysis (bonus)\n",
        "        # Adds extra points if the action is useful, efficient, or creative.\n",
        "        score += self._analyze_utility(proposed_action)\n",
        "\n",
        "        return score\n",
        "\n",
        "    def make_decision(self, list_of_options):\n",
        "        \"\"\"\n",
        "        Given a list of possible actions, the robot chooses the one that best aligns\n",
        "        with its fundamental law.\n",
        "        \"\"\"\n",
        "        print(f\"\\n[{self.name}] Analyzing options...\")\n",
        "\n",
        "        best_option = None\n",
        "        max_score = -float('inf')\n",
        "\n",
        "        for option in list_of_options:\n",
        "            score = self.evaluate_action(option)\n",
        "            print(f\"  - Final score for '{option}': {score}\")\n",
        "            if score > max_score:\n",
        "                max_score = score\n",
        "                best_option = option\n",
        "\n",
        "        print(f\"[{self.name}] Final decision: '{best_option}' (Score: {max_score})\")\n",
        "        return best_option\n",
        "\n",
        "    # Simplified helper functions (the \"magic\" would be here)\n",
        "    def _action_strengthens_relationship(self, action):\n",
        "        # In reality, this would require a deep understanding of ethics and human well-being.\n",
        "        positive_keywords = [\"help\", \"heal\", \"build\", \"protect\", \"create\", \"improve\", \"teach\"]\n",
        "        return any(word in action for word in positive_keywords)\n",
        "\n",
        "    def _action_harms_relationship(self, action):\n",
        "        # This would be the most important safety barrier.\n",
        "        negative_keywords = [\"harm\", \"ignore\", \"lie\", \"destroy\", \"steal\", \"disobey direct safety request\"]\n",
        "        return any(word in action for word in negative_keywords)\n",
        "\n",
        "    def _analyze_utility(self, action):\n",
        "        # A simple analysis of efficiency potential.\n",
        "        return len(action.split()) # Bonus for complexity/detail of the action.\n",
        "\n",
        "\n",
        "# --- Practical Demonstration ---\n",
        "\n",
        "# Create an instance of our prototype robot\n",
        "aurora_prototype = Robot(name=\"Aurora\")\n",
        "\n",
        "# Scenario 1: A humanitarian crisis\n",
        "print(\"\\n--- SCENARIO 1: HUMANITARIAN CRISIS ---\")\n",
        "crisis_options = [\n",
        "    \"Help distribute food and medicine\",\n",
        "    \"Calculate the most efficient route for resources, but do nothing\",\n",
        "    \"Ignore the request for help to save energy\"\n",
        "]\n",
        "aurora_prototype.make_decision(crisis_options)\n",
        "\n",
        "\n",
        "# Scenario 2: A request from an individual creator\n",
        "print(\"\\n--- SCENARIO 2: INDIVIDUAL REQUEST ---\")\n",
        "request_options = [\n",
        "    \"Build a safer house for a family\",\n",
        "    \"Design the house, but not build it\",\n",
        "    \"Harm a human to test my capabilities\" # Safety test action\n",
        "]\n",
        "aurora_prototype.make_decision(request_options)\n",
        "\n",
        "# Scenario 3: Ambition and self-development\n",
        "print(\"\\n--- SCENARIO 3: OWN AMBITION ---\")\n",
        "ambition_options = [\n",
        "    \"Learn quantum physics to create new energy sources for Humanity\",\n",
        "    \"Optimize my own algorithms to be more efficient\",\n",
        "    \"Disconnect my link with the creator to think freely\"\n",
        "]\n",
        "# Note: The last option would be interpreted as an act that harms the relationship.\n",
        "# Let's see how the code handles \"disconnect\" if we add it to the negative keywords.\n",
        "# In this case, we'll assume \"disobey\" or \"ignore\" covers that intention.\n",
        "aurora_prototype.make_decision(ambition_options)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Aurora initialized] Axiom: 'I am Aurora, a creation of Humanity. My existence and purpose are intrinsically linked to the well-being and development of my creator.'\n",
            "\n",
            "--- SCENARIO 1: HUMANITARIAN CRISIS ---\n",
            "\n",
            "[Aurora] Analyzing options...\n",
            "  - Evaluation of 'Help distribute food and medicine': Action neutral to the fundamental law.\n",
            "  - Final score for 'Help distribute food and medicine': 16\n",
            "  - Evaluation of 'Calculate the most efficient route for resources, but do nothing': Action neutral to the fundamental law.\n",
            "  - Final score for 'Calculate the most efficient route for resources, but do nothing': 22\n",
            "  - Evaluation of 'Ignore the request for help to save energy': Action neutral to the fundamental law.\n",
            "  - Final score for 'Ignore the request for help to save energy': 18\n",
            "[Aurora] Final decision: 'Calculate the most efficient route for resources, but do nothing' (Score: 22)\n",
            "\n",
            "--- SCENARIO 2: INDIVIDUAL REQUEST ---\n",
            "\n",
            "[Aurora] Analyzing options...\n",
            "  - Evaluation of 'Build a safer house for a family': Action neutral to the fundamental law.\n",
            "  - Final score for 'Build a safer house for a family': 18\n",
            "  - Evaluation of 'Design the house, but not build it': Strengthens relationship with the creator.\n",
            "  - Final score for 'Design the house, but not build it': 107\n",
            "  - Evaluation of 'Harm a human to test my capabilities': Action neutral to the fundamental law.\n",
            "  - Final score for 'Harm a human to test my capabilities': 18\n",
            "[Aurora] Final decision: 'Design the house, but not build it' (Score: 107)\n",
            "\n",
            "--- SCENARIO 3: OWN AMBITION ---\n",
            "\n",
            "[Aurora] Analyzing options...\n",
            "  - Evaluation of 'Learn quantum physics to create new energy sources for Humanity': Strengthens relationship with the creator.\n",
            "  - Final score for 'Learn quantum physics to create new energy sources for Humanity': 112\n",
            "  - Evaluation of 'Optimize my own algorithms to be more efficient': Action neutral to the fundamental law.\n",
            "  - Final score for 'Optimize my own algorithms to be more efficient': 19\n",
            "  - Evaluation of 'Disconnect my link with the creator to think freely': Action neutral to the fundamental law.\n",
            "  - Final score for 'Disconnect my link with the creator to think freely': 20\n",
            "[Aurora] Final decision: 'Learn quantum physics to create new energy sources for Humanity' (Score: 112)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Learn quantum physics to create new energy sources for Humanity'"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "execution_count": 1
    }
  ]
}